{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#osmox","title":"OSMOX","text":"<p>A tool for extracting locations and features from OpenStreetMap (OSM) data.</p>"},{"location":"#why","title":"Why?","text":"<p>We use OSMOX to extract locations from OSM for city or national scale agent-based models. In particular, the focus tends to be on extracting buildings and their designated usages, for example <code>homes</code>, <code>schools</code>, <code>medical facilities</code> and <code>places of work</code>. However, this can also be abstracted to other objects such as transit, parks or land use.</p> <p>Under the hood, OSMOX is a collection of labelling and GIS-type operations:</p> <ul> <li>filtering</li> <li>activity labelling</li> <li>simple spatial activity inference</li> <li>feature extraction (such as floor areas)</li> <li>filling in missing data</li> </ul> <p>Once assembled, these form part of our wider pipeline. But as a standalone tool, OSMOX is useful for extracting insights from OSM in a reproducible manner.</p> <p> ^ Isle of Man <code>distance_to_nearest_transit</code>.</p>"},{"location":"config/","title":"Configuration","text":"<p>Configs are important, so we provide some examples in <code>configs</code> and a validation method for when you start editing or building your own configs:</p> <pre><code>osmox validate &lt;CONFIG PATH&gt;\n</code></pre> <p>OSMOX features and associated configurations are described in the sections below.</p> <p>See also</p> <p>We use a configuration schema to validate the configuration files you input - malformed files will cause OSMOX to fail fast and early. You can read a detailed description of the configuration as described in the schema here.</p> <p>Warning</p> <p>These configs get very long - see the full examples in the <code>configs</code> to get an idea.</p>"},{"location":"config/#definitions","title":"Definitions","text":"<p>OSMObjects - objects extracted from OSM; can be points, lines or polygons; OSMObjects have features.</p> <p>OSMFeatures - OSMObjects have features, which typically include a key and value based on the OSM wiki.</p>"},{"location":"config/#primary-functionality","title":"Primary Functionality","text":"<p>The primary use case for OSMOX is for extracting a representation of places where people can do various activities ('education' or 'work' or 'shop' for example). This is done by applying a configured mapping to OSM tags:</p>"},{"location":"config/#filter","title":"Filter","text":"<p>Filter OSMObjects based on OSM tags (eg: select 'building:yes' objects). Filtered objects are defined in a <code>config.json</code>. For example, if we were interested in extracting education type <code>buildings</code>:</p> <pre><code>{\n    \"filter\": {\n        \"building\": [\n            \"kindergarden\",\n            \"school\",\n            \"university\",\n            \"college\",\n            \"yes\"\n        ]\n    }, ...\n}\n</code></pre>"},{"location":"config/#activity-mapping","title":"Activity Mapping","text":"<p>Map object activities based on OSM tags (eg: this building type 'university' is an education facility). Activity mapping is based on the same <code>config.json</code>, but we add a new section <code>activity_mapping</code>. For each OSM tag (a key such as <code>building</code> and a value such as <code>hotel</code>,) we map a list of activities:</p> <pre><code>{\n    ...\n    \"activity_mapping\": {\n        \"building\": {\n            \"hotel\": [\"work\", \"visit\"],\n            \"residential\": [\"home\"]\n        }\n    }\n}\n</code></pre> <p>Because an OSM tag key is often sufficient to make an activity mapping, we allow use of <code>*</code> as \"all\":</p> <pre><code>{\n    ...\n    \"activity_mapping\": {\n    ...\n        \"office\": {\n            \"*\": [\"work\"]\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>The filter controls the final objects that get extracted, but the activity mapping is more general. It is typical to map tags that are not included in the filter because these can be used by subsequent steps (such as inference) to assign activities where otherwise useful tags aren't included. There is no harm in over-specifying the mapping.</p>"},{"location":"config/#spatial-inference","title":"Spatial Inference","text":"<p>Because OSMObjects do not always contain useful tags, we also infer object tags based on spatial operations with surrounding tags.</p> <p>The most common use case for this is building objects that are simply tagged as <code>building:yes</code>. We use the below logic to infer useful tags, such as 'building:shop' or 'building:residential'.</p>"},{"location":"config/#contains","title":"Contains","text":"<p>If an OSMObject has no mappable tags (eg <code>building:yes</code>), tags are assigned based on the tags of objects that are contained within. For example, a building that contains an <code>amenity:shop</code> point, it is then tagged as <code>amenity:shop</code>.</p>"},{"location":"config/#within","title":"Within","text":"<p>Where an OSMObject still does not have a useful OSM tag, the object tag will be assigned based on the tag of the object that it is contained within. The most common case is for untagged buildings to be assigned based on landuse objects. For example, a building within a <code>landuse:residential</code> area will be assigned with <code>building:residential</code>.</p> <p>In both cases we need to add the OSM tags we plan to use to the activity_mapping config, for example:</p> <pre><code>{\n    ....\n    \"activity_mapping\": {\n        \"building\": {\n            \"hotel\": [\"work\", \"visit\"],\n            \"residential\": [\"home\"]\n        },\n        \"amenity\": {\n          \"cafe\": [\"work\", \"eat\"]\n        },\n        \"landuse\": {\n          \"residential\": [\"home\"]\n        }\n    }\n}\n</code></pre>"},{"location":"config/#default","title":"Default","text":"<p>Where an OSM object still does not have a useful OSM tag, we can optionally apply defaults. Again, these are set in the config:</p> <pre><code>{\n    ...\n    \"default_tags\": [[\"building\", \"residential\"]],\n    ...\n}\n</code></pre>"},{"location":"config/#feature-extraction","title":"Feature Extraction","text":"<p>Beyond simple assignment of human activities based on OSM tags, we also support the extraction of other features:</p> <ul> <li>areas</li> <li>floors</li> <li>floor areas</li> <li>units (eg residential units in a building)</li> </ul> <p>These can be configured as follows:</p> <pre><code>{\n    ...\n    \"features_config\": [\"units\", \"floors\", \"area\", \"floor_area\"]\n    ...\n}\n</code></pre>"},{"location":"config/#distance-to-nearest-extraction","title":"Distance to Nearest Extraction","text":"<p>OSMOX also supports calculating distance to nearest features based on object activities. For example, we can extract nearest distance to <code>transit</code>, <code>education</code>, <code>shop</code> and <code>medical</code> by adding the following to the config:</p> <pre><code>{\n    ...\n    \"distance_to_nearest\": [\"transit\", \"education\", \"shop\", \"medical\"],\n    ...\n}\n</code></pre> <p>Note that the selected activities are based on the activity mapping config. Any activities should therefore be included in the activity mapping part of the config. You can use <code>osmox validate &lt;CONFIG PATH&gt;</code> to check if a config is correctly specified.</p>"},{"location":"config/#fill-in-missing-activities","title":"Fill in Missing Activities","text":"<p>We have noted that it is not uncommon for some small areas to not have building objects, but to have an appropriate landuse area tagged as 'residential'.</p> <p>We therefore provide different methods for filling in areas, from a very ad-hoc solution for filling with a grid of objects to a solution which relies on external source of building locations without any accompanying metadata.</p> <p>These infill methods can cover areas that do not have any of the required activities already within them, or those with a user-defined percentage of the area already occupied by required activities.</p>"},{"location":"config/#fill-with-grid-of-objects","title":"Fill with grid of objects","text":"<p>For example, given an area tagged as <code>landuse:residential</code> by OSM that does not contain any object of activity type <code>home</code>, the fill in method will add a grid of new objects tagged <code>building:house</code>. The new objects will also have activity type <code>home</code>, size <code>10 by 10</code> and be spaced at <code>25 by 25</code>:</p> <pre><code>{\n    ...\n    \"fill_missing_activities\":\n        [\n            {\n                \"area_tags\": [[\"landuse\", \"residential\"]],\n                \"required_acts\": [\"home\"],\n                \"new_tags\": [[\"building\", \"house\"]],\n                \"size\": [10, 10],\n                \"fill_method\": \"spacing\",\n                \"spacing\": [25, 25]\n            }\n        ]\n}\n</code></pre> Example Isle of Man activity filling in action for a residential area without building locations. <p>Note</p> <p>The selected activities are based on the activity mapping config. Any activities should therefore be included in the activity mapping part of the config. You can use <code>osmox validate &lt;CONFIG PATH&gt;</code> to check if a config is correctly specified.</p> <p>Multiple groups can also be defined, for example:</p> <pre><code>{\n    ...\n    \"fill_missing_activities\":\n        [\n            {\n                \"area_tags\": [[\"landuse\", \"residential\"]],\n                \"required_acts\": [\"home\"],\n                \"new_tags\": [[\"building\", \"house\"]],\n                \"size\": [10, 10],\n                \"fill_method\": \"spacing\",\n                \"spacing\": [25, 25]\n            },\n            {\n                \"area_tags\": [[\"landuse\", \"forest\"], [\"landuse\", \"orchard\"]],\n                \"required_acts\": [\"tree_climbing\", \"glamping\"],\n                \"new_tags\": [[\"amenity\", \"tree\"], [\"building\", \"tree house\"]],\n                \"size\": [3, 3],\n                \"fill_method\": \"spacing\",\n                \"spacing\": [8, 8]\n            }\n        ]\n    ....\n}\n</code></pre>"},{"location":"config/#fill-with-a-point-data-source","title":"Fill with a point data source","text":"<p>Instead of filling with a predefined spacing, a user can also use the <code>fill_method=\"point_source\"</code> configuration option to load point data from a geospatial data file. These points will be masked using land use data, retaining only those that exist within the tagged areas. This is particularly useful in countries which supply open postal address data (e.g., the US and UK), which pinpoints building locations but does not match them to activity data.</p> <pre><code>{\n    ...\n    \"fill_missing_activities\":\n        [\n            {\n                \"area_tags\": [[\"landuse\", \"residential\"]],\n                \"required_acts\": [\"home\"],\n                \"new_tags\": [[\"building\", \"house\"]],\n                \"size\": [10, 10],\n                \"fill_method\": \"point_source\",\n                \"point_source\": \"path/to/file.geojson\"\n            }\n        ]\n}\n</code></pre> Comparison of using a point source and even spacing to fill missing activities for a residential area in Suffolk, UK. In this example, the point source is the UK open UPRN dataset. <p>Note</p> <p>The point source file can be a GeoParquet file or any format supported by GeoPandas/fiona (ESRI shapefile, GeoPackage, etc.).</p> <p>Warning</p> <p>If using the <code>point_source</code> <code>fill_method</code>, the <code>spacing</code> configuration option will have no effect.</p>"},{"location":"config/#fill-in-areas-with-existing-facilities","title":"Fill in areas with existing facilities","text":"<p>By default, if there are any of the required activities in a target area, that area will not be infilled. You can allow for infilling in these areas by setting <code>max_existing_acts_fraction</code>. This is the fraction of a target area that can be taken up by existing required activities while still allowing infilling. A value of 0.05 would allow target areas with up to 5% of the land area occupied by required activities to still be infilled.</p> <p>Note</p> <p>This may become messy at high fractions as the infilling will cover the whole area, including parts where there are existing required activities.</p> <pre><code>{\n    ...\n    \"fill_missing_activities\":\n        [\n            {\n                \"area_tags\": [[\"landuse\", \"residential\"]],\n                \"required_acts\": [\"home\"],\n                \"new_tags\": [[\"building\", \"house\"]],\n                \"size\": [10, 10],\n                \"fill_method\": \"spacing\",\n                \"spacing\": [25, 25],\n                \"max_existing_acts_fraction\": 0.05\n            }\n        ]\n}\n</code></pre> <p>In the following images we can see two areas that require setting a <code>max_existing_acts_fraction</code> above zero to accomplish infilling. In the first, almost all of the area required infilling. In the second, some of the area was already captured by OSM data, but infilling proved to still be necessary to fill the remainder of the area.</p> Example of filling missing activities for a residential area in Suffolk, UK with a small number of existing \"home\" activities in that area. In this example, the point source infill method was used. Example of filling missing activities for a residential area in Suffolk, UK with a clear overlap between infill and existing \"home\" activities in that area. Even though there is overlap, the infilling is worthwhile as there are many missing points. In this example, the point source infill method was used."},{"location":"contributing/","title":"Contributing","text":"<p>osmox is an actively maintained and utilised project.</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>to report issues, request features, or exchange with our community, just follow the links below.</p> <p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p> <p>Have a question or need help?</p> <p> Ask a question</p>"},{"location":"contributing/#developing-osmox","title":"Developing osmox","text":"<p>To find beginner-friendly existing bugs and feature requests you may like to start out with, take a look at our good first issues.</p>"},{"location":"contributing/#known-issues","title":"Known issues","text":"<ul> <li>OSMOX is slow - for national scale extractions we're talking many hours. There are some areas that can be sped up, some that will parallelize ok. But treating all this as premature until an output format is nailed down and there are a few more users.</li> <li>We need tests for the use of all <code>*</code> in the config filter and mappings.</li> <li>We want to move to yaml configs.</li> <li>add zonal labelling (eg lsoa assignment).</li> <li>perhaps add a sampling format (zone:act:{viables}).</li> <li>Add support to keep original geometries.</li> <li>add .shp option.</li> <li>add other distance or similar type features, eg count of nearest neighbours.</li> <li>warning or feedback when trying to process really large datasets.</li> </ul>"},{"location":"contributing/#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>To create a development environment for osmox, with all libraries required for development and quality assurance installed, it is easiest to install osmox using the mamba package manager, as follows:</p> <ol> <li>Install mamba with the Mambaforge executable for your operating system.</li> <li>Open the command line (or the \"miniforge prompt\" in Windows).</li> <li>Download (a.k.a., clone) the osmox repository: <code>git clone git@github.com:arup-group/osmox.git</code></li> <li>Change into the <code>osmox</code> directory: <code>cd osmox</code></li> <li>Create the osmox mamba environment: <code>mamba create -n osmox -c conda-forge -c city-modelling-lab --file requirements/base.txt --file requirements/dev.txt</code></li> <li>Activate the osmox mamba environment: <code>mamba activate osmox</code></li> <li>Install the osmox package into the environment, in editable mode and ignoring dependencies (we have dealt with those when creating the mamba environment): <code>pip install --no-deps -e .</code></li> </ol> <p>All together:</p> <pre><code>git clone git@github.com:arup-group/osmox.git\ncd osmox\nmamba create -n osmox -c conda-forge -c city-modelling-lab --file requirements/base.txt --file requirements/dev.txt\nmamba activate osmox\npip install --no-deps -e .\n</code></pre> <p>If installing directly with pip, you can install these libraries using the <code>dev</code> option, i.e., <code>pip install -e '.[dev]'</code></p> <p>If you plan to make changes to the code then please make regular use of the following tools to verify the codebase while you work:</p> <ul> <li><code>pre-commit</code>: run <code>pre-commit install</code> in your command line to load inbuilt checks that will run every time you commit your changes. The checks are: 1. check no large files have been staged, 2. lint python files for major errors, 3. format python files to conform with the PEP8 standard. You can also run these checks yourself at any time to ensure staged changes are clean by calling <code>pre-commit</code>.</li> <li><code>pytest</code> - run the unit test suite and check test coverage.</li> </ul>"},{"location":"contributing/#rapid-fire-testing","title":"Rapid-fire testing","text":"<p>The following options allow you to strip down the test suite to the bare essentials: 1. You can avoid generating coverage reports, by adding the <code>--no-cov</code> argument: <code>pytest --no-cov</code>. 1. By default, the tests run with up to two parallel threads, to increase this to e.g. 4 threads: <code>pytest -n4</code>.</p> <p>All together:</p> <pre><code>pytest tests/ --no-cov -n4\n</code></pre> <p>Note</p> <p>You cannot debug failing tests and have your tests run in parallel, you will need to set <code>-n0</code> if using the <code>--pdb</code> flag</p>"},{"location":"contributing/#memory-profiling","title":"Memory profiling","text":"<p>Note</p> <p>When you open a pull request (PR), one of the GitHub actions will run memory profiling for you. This means you don't have to do any profiling locally. However, if you can, it is still good practice to do so as you will catch issues earlier.</p> <p>osmox can be memory intensive; we like to ensure that any development to the core code does not exacerbate this. If you are running on a UNIX device (i.e., not on Windows), you can test whether any changes you have made adversely impact memory and time performance as follows:</p> <ol> <li>Install memray in your <code>osmox</code> mamba environment: <code>mamba install memray pytest-memray</code>.</li> <li>Run the memory profiling integration test: <code>pytest -p memray -m \"high_mem\" --no-cov</code>.</li> <li>Optionally, to visualise the memory allocation, run <code>pytest -p memray -m \"high_mem\" --no-cov --memray-bin-path=[my_path] --memray-bin-prefix=[my_prefix]</code> - where you must define <code>[my_path]</code> and <code>[my_prefix]</code> - followed by <code>memray flamegraph [my_path]/[my_prefix]-tests-test_100_memory_profiling.py-test_mem.bin</code>. You will then find the HTML report at <code>[my_path]/memray-flamegraph-[my_prefix]-tests-test_100_memory_profiling.py-test_mem.html</code>.</li> </ol> <p>All together:</p> <pre><code>mamba install memray pytest-memray\npytest -p memray -m \"high_mem\" --no-cov --memray-bin-path=[my_path] --memray-bin-prefix=[my_prefix]\nmemray flamegraph [my_path]/[my_prefix]-tests-test_100_memory_profiling.py-test_mem.bin\n</code></pre> <p>For more information on using memray, refer to their documentation.</p>"},{"location":"contributing/#updating-the-project-when-the-template-updates","title":"Updating the project when the template updates","text":"<p>This project has been built with cruft based on the Arup Cookiecutter template. When changes are made to the base template, they can be merged into this project by running <code>cruft update</code> from the  <code>osmox</code> mamba environment.</p> <p>You may be prompted to do this when you open a Pull Request, if our automated checks identify that the template is newer than that used in the project.</p>"},{"location":"contributing/#submitting-changes","title":"Submitting changes","text":"<p>To contribute changes:</p> <ol> <li>Fork the project on GitHub.</li> <li>Create a feature branch to work on in your fork (<code>git checkout -b new-fix-or-feature</code>).</li> <li>Test your changes using <code>pytest</code>.</li> <li>Commit your changes to the feature branch (you should have <code>pre-commit</code> installed to ensure your code is correctly formatted when you commit changes).</li> <li>Push the branch to GitHub (<code>git push origin new-fix-or-feature</code>).</li> <li>On GitHub, create a new pull request from the feature branch.</li> </ol>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>Before submitting a pull request, check whether you have:</p> <ul> <li>Added your changes to <code>CHANGELOG.md</code>.</li> <li>Added or updated documentation for your changes.</li> <li>Added tests if you implemented new functionality.</li> </ul> <p>When opening a pull request, please provide a clear summary of your changes!</p>"},{"location":"contributing/#commit-messages","title":"Commit messages","text":"<p>Please try to write clear commit messages. One-line messages are fine for small changes, but bigger changes should look like this:</p> <pre><code>A brief summary of the commit (max 50 characters)\n\nA paragraph or bullet-point list describing what changed and its impact,\ncovering as many lines as needed.\n</code></pre>"},{"location":"contributing/#code-conventions","title":"Code conventions","text":"<p>Start reading our code and you'll get the hang of it.</p> <p>We mostly follow the official Style Guide for Python Code (PEP8).</p> <p>We have chosen to use the uncompromising code formatter <code>black</code> and the linter <code>ruff</code>. When run from the root directory of this repo, <code>pyproject.toml</code> should ensure that formatting and linting fixes are in line with our custom preferences (e.g., 100 character maximum line length). The philosophy behind using <code>black</code> is to have uniform style throughout the project dictated by code. Since <code>black</code> is designed to minimise diffs, and make patches more human readable, this also makes code reviews more efficient. To make this a smooth experience, you should run <code>pre-commit install</code> after setting up your development environment, so that <code>black</code> makes all the necessary fixes to your code each time you commit, and so that <code>ruff</code> will highlight any errors in your code. If you prefer, you can also set up your IDE to run these two tools whenever you save your files, and to have <code>ruff</code> highlight erroneous code directly as you type. Take a look at their documentation for more information on configuring this.</p> <p>We require all new contributions to have docstrings for all modules, classes and methods. When adding docstrings, we request you use the Google docstring style.</p>"},{"location":"contributing/#release-checklist","title":"Release checklist","text":""},{"location":"contributing/#pre-release","title":"Pre-release","text":"<ul> <li> Make sure all unit and integration tests pass (This is best done by creating a pre-release pull request).</li> <li> Re-run tutorial Jupyter notebooks (<code>pytest examples/ --overwrite</code>).</li> <li> Make sure documentation builds without errors (<code>mike deploy [version]</code>, where <code>[version]</code> is the current minor release of the form <code>X.Y</code>).</li> <li> Make sure the changelog is up-to-date, especially that new features and backward incompatible changes are clearly marked.</li> </ul>"},{"location":"contributing/#create-release","title":"Create release","text":"<ul> <li> Bump the version number in <code>src/osmox/__init__.py</code></li> <li> Update the changelog with final version number of the form <code>vX.Y.Z</code>, release date, and github <code>compare</code> link (at the bottom of the page).</li> <li> Commit with message <code>Release vX.Y.Z</code>, then add a <code>vX.Y.Z</code> tag.</li> <li> Create a release pull request to verify that the conda package builds successfully.</li> <li> Once the PR is approved and merged, create a release through the GitHub web interface, using the same tag, titling it <code>Release vX.Y.Z</code> and include all the changelog elements that are not flagged as internal.</li> </ul>"},{"location":"contributing/#post-release","title":"Post-release","text":"<ul> <li> Update the changelog, adding a new <code>[Unreleased]</code> heading.</li> <li> Update <code>src/osmox/__init__.py</code> to the next version appended with <code>.dev0</code>, in preparation for the next main commit.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#setting-up-a-user-environment","title":"Setting up a user environment","text":"<p>As a <code>osmox</code> user, it is easiest to install using the mamba package manager, as follows:</p> <ol> <li>Install mamba with the Mambaforge executable for your operating system.</li> <li>Open the command line (or the \"miniforge prompt\" in Windows).</li> <li>Create the osmox mamba environment: <code>mamba create -n osmox -c conda-forge -c city-modelling-lab osmox</code></li> <li>Activate the osmox mamba environment: <code>mamba activate osmox</code></li> </ol> <p>All together:</p> <pre><code>git clone git@github.com:arup-group/osmox.git\ncd osmox\nmamba create -n osmox -c conda-forge -c city-modelling-lab --file requirements/base.txt\nmamba activate osmox\npip install --no-deps .\n</code></pre>"},{"location":"installation/#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>The install instructions are slightly different to create a development environment compared to a user environment:</p> <pre><code>git clone git@github.com:arup-group/osmox.git\ncd osmox\nmamba create -n osmox -c conda-forge -c city-modelling-lab --file requirements/base.txt --file requirements/dev.txt\nmamba activate osmox\npip install --no-deps -e .\n</code></pre> <p>For more detailed installation instructions specific to developing the osmox codebase, see our development documentation.</p>"},{"location":"osmox_run/","title":"OSMOX Run","text":"<p><code>osmox run &lt;CONFIG_PATH&gt; &lt;INPUT_PATH&gt; &lt;OUTPUT_NAME&gt;</code> is the main entry point for OSMOX. Available options are detailed in on our Command Line Interface reference page.</p> <p>Configuration options are described in a separate page. The <code>&lt;INPUT_PATH&gt;</code> should point to an OSM map dataset (<code>osm.xml</code> and <code>osm.pbf</code> are supported). The <code>&lt;OUTPUT_NAME&gt;</code> should be the desired name of the geopackage output file i.e. <code>isle-of-man</code>.</p>"},{"location":"osmox_run/#using-docker","title":"Using Docker","text":""},{"location":"osmox_run/#build-the-image","title":"Build the image","text":"<pre><code>docker build -t \"osmox\" .\n</code></pre>"},{"location":"osmox_run/#running-osmox-in-a-container","title":"Running OSMOX in a container","text":"<p>Once you have built the image, the only thing you need to do is add the path to the folder where your inputs are stored to the command, in order to mount that folder (i.e. give the container access to the data in this folder):</p> <pre><code>docker run -v DATA_FOLDER_PATH:/MOUNT_PATH osmox CONFIG_PATH INPUT_PATH OUTPUT_NAME -f geopackage -crs epsg:27700 -l\n</code></pre> <p>For example, if your input data and config is stored on your machine in <code>/Users/user_1/mydata</code>, and this is also the directory where you wish to place the outputs:</p> <pre><code>docker run -v /Users/user_1/mydata:/mnt/mydata osmox /mnt/mydata/example_config.json /mnt/mydata/isle-of-man-latest.osm.pbf example/isle-of-man -f geopackage -crs epsg:27700 -l\n</code></pre>"},{"location":"osmox_run/#options","title":"Options","text":"<p>The most common option you will need to use is <code>crs</code>. The default CRS is British National Grid (BNG, or EPSG:27700), so if you are working outside the UK you should adjust this accordingly. Specifying a relevant CRS for your data is important if you would like to extract sensible units of measurement for distances and areas. If this isn't a concern, you can specify CRS as WGS-84 (<code>-crs epsg:4326</code>).</p> <p>OSMOX will return multi-use objects where applicable. For example, a building that contains both a restaurant and a shop can be labelled with <code>activities: \"eating,shopping\"</code>. This can make simple mapping of outputs quite complex, as there are many possible combinations of joined use. To work around this problem, the optional flag <code>-s</code> or <code>--single_use</code> may be set to instead output unique objects for each activity. For example, for the above case, extracting two identical buildings, one with <code>activity: \"eating\"</code> and the other with <code>activity: \"shopping\"</code>.</p> <p>Writing to multiple file formats is supported. The default is geopackage (<code>.gpkg</code>), with additional support for GeoJSON (<code>.geojson</code>) and geoparquet (<code>.parquet</code>).</p>"},{"location":"osmox_run/#output","title":"Output","text":"<p>After running <code>osmox run &lt;CONFIG_PATH&gt; &lt;INPUT_PATH&gt; &lt;OUTPUT_NAME&gt;</code> you should see something like the following (slowly if you are processing a large map) appear in your terminal:</p> <pre><code>Loading config from 'configs/config_NTS_UK.json'.\nConfigured activities: ['education', 'home', 'medical', 'other', 'shop', 'transit', 'visit', 'work']\nINFO:osmox.main: Filtering all objects found in data/suffolk-latest.osm.pbf.\nINFO:osmox.main: Found 118544 buildings.\nINFO:osmox.main: Found 2661 nodes with valid tags.\nINFO:osmox.main: Found 5647 areas with valid tags.\nINFO:osmox.main: Assigning object tags.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Finished assigning tags: f{'existing': 49457, 'points': 711, 'areas': 54422, 'defaults': 13954}.\nINFO:osmox.main: Assigning object activities.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Assigning object features: ['units', 'levels', 'area', 'floor_area'].\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Assigning distances to nearest transit.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Assigning distances to nearest education.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Assigning distances to nearest shop.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Assigning distances to nearest medical.\nProgress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.0% Complete\nINFO:osmox.main: Writing objects to: suffolk2/suffolk_epsg_27700.gpkg\nINFO:osmox.main: Reprojecting output to epsg:4326 (lat lon)\nINFO:osmox.main: Writing objects to: suffolk2/suffolk_epsg_4326.gpkg\nINFO:osmox.main:Done.\n</code></pre> <p>Once completed, you will find OSMOX has output file(s) in <code>.gpkg</code> format in the same folder as the OSM input file. If you have specified a CRS, you will find two output files, named as follows:</p> <ol> <li><code>&lt;OUTPUT_NAME&gt;_&lt;specified CRS name&gt;.gpkg</code></li> <li><code>&lt;OUTPUT_NAME&gt;_epsg_4326.gpkg</code></li> </ol> <p>We generally refer to the outputs collectively as <code>facilities</code> and their properties as <code>features</code>. Note that each facility has a unique id, a number of features (depending on the configuration) and a point geometry. In the case of areas or polygons, such as buildings, the point represents the centroid.</p> <p>If we had saved the oputput to GeoJSON - a plain text format - it would look like this on inspection:</p> <pre><code>{\n    \"id\": \"32653\",\n    \"type\": \"Feature\",\n    \"properties\": {\n        \"activities\": \"home\",\n        \"area\": 72,\n        \"distance_to_nearest_education\": 298.3127023231315,\n        \"floor_area\": 144.0,\n        \"id\": 717793726,\n        \"levels\": 2.0,\n        \"distance_to_nearest_medical\": 614.1725582520537,\n        \"distance_to_nearest_shop\": 170.41317833861532,\n        \"distance_to_nearest_transit\": 157.88388248911602,\n        \"units\": 1\n        },\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [613632.5100411727, 242323.73560476975]\n    }\n}\n</code></pre> <p>In the quick start demo, we specified the coordinate reference system as <code>epsg:27700</code> (this is the default, but we specified it for visibility) so that distance- and area-based features would have sensible units (metres in this case). If extracting data from other regions, we would encourage using the local CRS.</p>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Extract <code>home</code>, <code>work</code>, <code>education</code>, <code>shop</code> and various other activity locations (\"facilities\") for the Isle of Man, using the following steps (paths is given from OSMOX project root):</p> <p>First download <code>isle-of-man-latest.osm.pbf</code> from geofabrik and place in an <code>example</code> directory. Then run:</p> <pre><code>osmox run configs/example.json example/isle-of-man-latest.osm.pbf example/isle-of-man -f geopackage -crs epsg:27700 -l\n</code></pre> <p>After about 30 seconds, you should find the outputs in <code>.gpkg</code> format in the same <code>example</code> directory as your OSM input file. The geopackage file contains locations for the extracted facilities, and each facility includes a number of features with point geometry in the specified crs. If the user specifies a crs other than WGS-84 (EPSG:4326) coordinate reference system (CRS), OSMOX will write an additional file in WGS-84 (EPSG:4326) so that this can be quickly inspected.</p> <p><code>-l</code> is short for <code>--lazy</code> which helps osmox run a little faster.</p> <p>If we had saved the output to GeoJSON - a plain text format - it would look like this on inspection:</p> <pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        ...\n        {\n        \"id\": \"13589\",\n        \"type\": \"Feature\",\n        \"properties\": {\n            \"activities\": \"home\",\n            \"area\": 196,\n            \"distance_to_nearest_education\": 816.4434678355371,\n            \"distance_to_nearest_medical\": 366.81198701080626,\n            \"distance_to_nearest_shop\": 133.12877450643526,\n            \"distance_to_nearest_transit\": 122.33125535187033,\n            \"floor_area\": 392.0,\n            \"id\": 1869954720,\n            \"levels\": 2.0,\n            \"units\": 1\n            },\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [220894.60596542264, 467332.85704661923]\n            }\n        },\n        ...\n</code></pre> Isle of Man facility `floor_area` feature. Approximated based on polygon areas and floor labels or sensible defaults. Isle of Man `activities` feature. For simulations we use this information to control what agents can do where, but this is also a good disaggregate proxy for land-use. In this example, blue areas are residential, orange commercial and brown is other work places."},{"location":"api/cli/","title":"CLI Reference","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"api/cli/#osmox","title":"osmox","text":"<p>OSMOX Command Line Tool.</p> <p>Usage:</p> <pre><code>osmox [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"api/cli/#osmox-run","title":"osmox run","text":"<p>Usage:</p> <pre><code>osmox run [OPTIONS] CONFIG_PATH INPUT_PATH OUTPUT_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-f</code>, <code>--format</code> choice (<code>geojson</code> | <code>geopackage</code> | <code>geoparquet</code>) Output file format (default: geopackage) <code>geopackage</code> <code>-crs</code>, <code>--crs</code> text crs string eg (default): 'epsg:27700' (UK grid) <code>epsg:27700</code> <code>-s</code>, <code>--single_use</code> boolean split multi-activity facilities into multiple single-activity facilities <code>False</code> <code>-l</code>, <code>--lazy</code> boolean if filtered object already has a label, do not search for more (supresses multi-use) <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"api/cli/#osmox-validate","title":"osmox validate","text":"<p>Validate a config.</p> <p>Usage:</p> <pre><code>osmox validate [OPTIONS] CONFIG_PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Configuration validation to use a JSON schema. Partially backward-incompatible since configuration errors now raise exceptions rather than logging a message to the <code>error</code> level #56.</li> <li>Recommended installation instructions changed from using <code>pip</code> to creating a <code>mamba</code> environment #38.</li> <li>Supported and tested Python versions updated to py3.10 - py3.12 #38.</li> <li>Majority of documentation moved from README to dedicated documentation site: https://arup-group.github.io/osmox #40.</li> <li>Default output format changed from <code>.geojson</code> to <code>.gpkg</code> &amp; support for multiple file formats (<code>.gpkg</code>, <code>.geojson</code>, <code>.parquet</code>) #41</li> </ul>"},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Rendered JSON schema in documentation #56.</li> <li>Activity infilling can use a geospatial point data source to fill OSM <code>landuse</code> areas, e.g. postcode data points.</li> <li>Activity infilling can take place in target areas that have existing facilities, using the <code>max_existing_acts_fraction</code> argument to set the area that existing facilities can already take up in the target geometry while still allowing infilling.</li> </ul>"},{"location":"CHANGELOG/#v020","title":"[v0.2.0]","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Support for Python 3.11 by @val-ismaili in https://github.com/arup-group/osmox/pull/35</li> <li>A formal changelog</li> </ul>"},{"location":"CHANGELOG/#v010","title":"[v0.1.0]","text":""},{"location":"CHANGELOG/#initial-release","title":"Initial release","text":"<p>This is the first release and support Python 3.7, please check documentation/wiki for the usage guide</p>"},{"location":"schema/","title":"OSMOX config schema","text":"<p>Schema for the OSMOX config JSON file.</p> <ul> <li> <p><code>$schema</code> (string): Reference to OSMOX schema (URL or filepath). Setting this value will enable your IDE to highlight issues with your configuration.</p> </li> <li> <p><code>filter</code> (object, required): Filter OSM data to consider only these tags. Cannot contain additional properties.</p> <ul> <li> <p><code>^\\w+$</code> (array): List of tag values to filter. If all values should be used, use the '*' wildcard value.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> <li> <p><code>object_features</code> (array, required): Features of filtered OSM objects to keep in final facility dataset.</p> <ul> <li>Items (string): Must be one of: <code>[\"area\", \"levels\", \"floor_area\", \"units\", \"transit_distance\"]</code>.</li> </ul> </li> <li> <p><code>distance_to_nearest</code> (array): For every facility, add distance to nearest activity for every activity in this list. Each activity distance will be provided as a new data column.</p> <ul> <li>Items (string)</li> </ul> </li> <li> <p><code>default_tags</code> (array): For any filtered OSM object without any tags, use these tags as default.</p> <ul> <li> <p>Items (array): Tag [key, value] pairs. Length must be equal to 2.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> <li> <p><code>activity_mapping</code> (object, required): Map filtered OSM objects to OSMOX activities. Cannot contain additional properties.</p> <ul> <li> <p><code>^\\w+$</code> (object): OSM tag key name. Cannot contain additional properties.</p> <ul> <li> <p><code>^(\\*|\\w+)$</code> (array): Key: OSM object tag values, Value: list of activities to map to. If all tag values should be mapped to the same activities, use the <code>*</code> wildcard as the key.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>fill_missing_activities</code> (array): Fill tagged areas found in OSM with points according to a given method.</p> <ul> <li> <p>Items (object): Activity filling configuration. Filling will take place in the order they are placed in the list. Cannot contain additional properties.</p> <ul> <li> <p>All of</p> <ul> <li></li> <li></li> </ul> </li> <li> <p><code>area_tags</code> (array, required): Key:value pairs to filter on for infilling, often land use area tags (e.g. ['landuse', 'residential']. Length must be at least 1. Default: <code>[\"landuse\", \"residential\"]</code>.</p> <ul> <li> <p>Items (array): Tag [key, value] pairs. Length must be equal to 2.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> <li> <p><code>required_acts</code>: Single activity or list of activities to look for in the filtered area. If present, infilling will not be undertaken (see <code>max_existing_acts_fraction</code> to set a threshold for when the presence of required activities will stop infilling). Default: <code>[\"home\"]</code>.</p> <ul> <li> <p>One of</p> <ul> <li> <p>string: Activity name.</p> </li> <li> <p>array: Activity names. Length must be at least 1.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>new_tags</code> (array, required): New OSM tags to assign to infilled facilities. These will be used to map to OSMOX activities using <code>activity_mapping</code>. Default: <code>[\"building\", \"house\"]</code>.</p> <ul> <li> <p>Items (array): Tag [key, value] pairs. Length must be equal to 2.</p> <ul> <li>Items (string)</li> </ul> </li> </ul> </li> <li> <p><code>size</code> (array): Footprint of infilled facilities as [length/x, width/y] values, extending from the bottom-left of each point. Will be used to define the <code>area</code> feature of the infilled facilities. Length must be equal to 2. Default: <code>[10, 10]</code>.</p> <ul> <li>Items (number): Exclusive minimum: <code>0</code>.</li> </ul> </li> <li> <p><code>spacing</code> (array): Spacing between infilled facilities as [length/x, width/y] values from the bottom-left of each point. Will only be used if <code>fill_method</code> is <code>spacing</code>. Length must be equal to 2. Default: <code>[25, 25]</code>.</p> <ul> <li>Items (number): Exclusive minimum: <code>0</code>.</li> </ul> </li> <li> <p><code>fill_method</code> (string): Choice of infilling method. <code>spacing</code> will space infilled points evenly across each filtered area. <code>point_source</code> will use a user-defined dataset of points (e.g. addresses) to infill. Must be one of: <code>[\"spacing\", \"point_source\"]</code>. Default: <code>\"spacing\"</code>.</p> </li> <li> <p><code>point_source</code> (string): Path to geospatial dataset of points to use for infilling. Can be any format in [<code>geparquet</code>, <code>geojson</code>, <code>geopackage</code>]. Will only be used if <code>fill_method</code> is <code>point_source</code>.</p> </li> <li> <p><code>max_existing_acts_fraction</code> (number): Fraction of filtered area that can be occupied by existing required activities (given in <code>required_acts</code>) before infilling of that area will be skipped. Uses the <code>area</code> feature of facilities or the area inferred by <code>size</code>, if the facility is given only be a point. Minimum: <code>0</code>. Default: <code>0</code>.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/osmox/build/","title":"osmox.build","text":""},{"location":"reference/osmox/build/#osmox.build.OSMObject","title":"<code>OSMObject = namedtuple('OSMobject', 'idx, activity_tags, geom')</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.OSMTag","title":"<code>OSMTag = namedtuple('OSMtag', 'key value')</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object","title":"<code>Object(idx, osm_tags, activity_tags, geom)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def __init__(self, idx, osm_tags, activity_tags, geom) -&gt; None:\n    self.idx = idx\n    self.osm_tags = dict(osm_tags)\n    self.activity_tags = activity_tags\n    self.geom = geom\n    self.activities = None\n    self.features: dict = {}\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.DEFAULT_LEVELS","title":"<code>DEFAULT_LEVELS = {'apartments': 4, 'bungalow': 1, 'detached': 2, 'dormitory': 4, 'hotel': 3, 'house': 2, 'residential': 2, 'semidetached_house': 2, 'terrace': 2, 'commercial': 1, 'retail': 1, 'supermarket': 1, 'industrial': 1, 'office': 4, 'warehouse': 1, 'bakehouse': 1, 'firestation': 2, 'government': 2, 'cathedral': 1, 'chapel': 1, 'church': 1, 'mosque': 1, 'religous': 1, 'shrine': 1, 'synagogue': 1, 'temple': 1, 'hospital': 4, 'kindergarden': 2, 'school': 2, 'university': 3, 'college': 3, 'sports_hall': 1, 'stadium': 1}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.activities","title":"<code>activities = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.activity_tags","title":"<code>activity_tags = activity_tags</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.features","title":"<code>features: dict = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.geom","title":"<code>geom = geom</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.idx","title":"<code>idx = idx</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.osm_tags","title":"<code>osm_tags = dict(osm_tags)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.Object.add_features","title":"<code>add_features(features)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def add_features(self, features):\n    available = {\n        \"area\": self.area,\n        \"levels\": self.levels,\n        \"floor_area\": self.floor_area,\n        \"units\": self.units,\n    }\n    for f in features:\n        self.features[f] = available[f]()\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.add_tags","title":"<code>add_tags(osm_objects)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def add_tags(self, osm_objects):\n    for o in osm_objects:\n        if o.activity_tags:\n            self.activity_tags.extend(o.activity_tags)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.apply_default_tag","title":"<code>apply_default_tag(tag)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def apply_default_tag(self, tag):\n    self.activity_tags = [OSMTag(tag[0], tag[1])]\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.area","title":"<code>area()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def area(self):\n    return int(self.geom.area)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.assign_activities","title":"<code>assign_activities(activity_lookup, weight_calculations=None)</code>","text":"<p>Create a list of unique activities based on activity tags. This method is currently kept here incase we want to deal with duplicate assignments differently in future.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def assign_activities(self, activity_lookup, weight_calculations=None):\n    \"\"\"\n    Create a list of unique activities based on activity tags.\n    This method is currently kept here incase we want to deal with\n    duplicate assignments differently in future.\n    \"\"\"\n    act_set = set()\n    for tag in self.activity_tags:\n        act_set |= set(activity_lookup.get(tag.key, {}).get(tag.value, []))\n    self.activities = list(act_set)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.assign_areas","title":"<code>assign_areas(areas)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def assign_areas(self, areas):\n    snaps = [c for c in areas.intersection(self.geom.bounds)]\n    snaps = [c for c in snaps if c.geom.contains(self.geom.centroid)]\n    if snaps:\n        self.add_tags(snaps)\n        return True\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.assign_points","title":"<code>assign_points(points)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def assign_points(self, points):\n    snaps = [c for c in points.intersection(self.geom.bounds)]\n    if snaps:\n        self.add_tags(snaps)\n        return True\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.floor_area","title":"<code>floor_area()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def floor_area(self):\n    return self.area() * self.levels()\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.get_closest_distance","title":"<code>get_closest_distance(targets, name)</code>","text":"<p>Calculate euclidean distance to nearest target :params Multipoint targets: A Shapely Multipoint object of all targets</p> Source code in <code>src/osmox/build.py</code> <pre><code>def get_closest_distance(self, targets, name):\n    \"\"\"\n    Calculate euclidean distance to nearest target\n    :params Multipoint targets: A Shapely Multipoint object of all targets\n    \"\"\"\n    if not targets:\n        self.features[f\"distance_to_nearest_{name}\"] = None\n    else:\n        nearest = nearest_points(self.geom.centroid, targets)\n        self.features[f\"distance_to_nearest_{name}\"] = helpers.get_distance(nearest)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.levels","title":"<code>levels()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def levels(self):\n    if \"building:levels\" in self.osm_tags:\n        levels = self.osm_tags[\"building:levels\"]\n        if levels.isnumeric():\n            return float(levels)  # todo ensure integer\n    if \"height\" in self.osm_tags:\n        height = helpers.height_to_m(self.osm_tags[\"height\"])\n        if height:\n            return float(height / 4)\n    if self.osm_tags.get(\"building\"):\n        if self.osm_tags[\"building\"] in self.DEFAULT_LEVELS:\n            return self.DEFAULT_LEVELS[self.osm_tags[\"building\"]]\n        return 2\n    return 1\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.single_activity_summaries","title":"<code>single_activity_summaries()</code>","text":"<p>Yield (dict) summaries for each each activity of an object.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def single_activity_summaries(self):\n    \"\"\"\n    Yield (dict) summaries for each each activity of an object.\n    \"\"\"\n    for act in self.activities:\n        fixed = {\"id\": str(self.idx), \"activity\": act, \"geometry\": self.geom.centroid}\n        yield {**fixed, **self.features}\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.summary","title":"<code>summary()</code>","text":"<p>Returbn a dict summary.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def summary(self):\n    \"\"\"\n    Returbn a dict summary.\n    \"\"\"\n    fixed = {\n        \"id\": str(self.idx),\n        \"activities\": \",\".join(self.activities),\n        \"geometry\": self.geom.centroid,\n    }\n    return {**fixed, **self.features}\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.transit_distance","title":"<code>transit_distance()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def transit_distance(self):\n    return self._transit_distance\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.Object.units","title":"<code>units()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def units(self):\n    if \"building:flats\" in self.osm_tags:\n        flats = self.osm_tags[\"building:flats\"]\n        if flats.isnumeric():\n            return float(flats)  # todo ensure integer\n    return 1\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler","title":"<code>ObjectHandler(config, crs='epsg:27700', from_crs='epsg:4326', lazy=False, level=logging.DEBUG)</code>","text":"<p>               Bases: <code>SimpleHandler</code></p> Source code in <code>src/osmox/build.py</code> <pre><code>def __init__(\n    self, config, crs=\"epsg:27700\", from_crs=\"epsg:4326\", lazy=False, level=logging.DEBUG\n):\n\n    super().__init__()\n    logging.basicConfig(level=level)\n    self.cnfg = config\n    self.crs = crs\n    self.lazy = lazy\n    self.filter = self.cnfg[\"filter\"]\n    self.object_features = self.cnfg[\"object_features\"]\n    self.default_tags = self.cnfg[\"default_tags\"]\n    self.activity_config = self.cnfg[\"activity_mapping\"]\n    self.transformer = Transformer.from_crs(CRS(from_crs), CRS(crs), always_xy=True)\n\n    self.objects = helpers.AutoTree()\n    self.points = helpers.AutoTree()\n    self.areas = helpers.AutoTree()\n\n    self.log = {\"existing\": 0, \"points\": 0, \"areas\": 0, \"defaults\": 0}\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.activity_config","title":"<code>activity_config = self.cnfg['activity_mapping']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.areas","title":"<code>areas = helpers.AutoTree()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.cnfg","title":"<code>cnfg = config</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.crs","title":"<code>crs = crs</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.default_tags","title":"<code>default_tags = self.cnfg['default_tags']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.filter","title":"<code>filter = self.cnfg['filter']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.lazy","title":"<code>lazy = lazy</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.log","title":"<code>log = {'existing': 0, 'points': 0, 'areas': 0, 'defaults': 0}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.object_features","title":"<code>object_features = self.cnfg['object_features']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.objects","title":"<code>objects = helpers.AutoTree()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.points","title":"<code>points = helpers.AutoTree()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.transformer","title":"<code>transformer = Transformer.from_crs(CRS(from_crs), CRS(crs), always_xy=True)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.wkbfab","title":"<code>wkbfab = osmium.geom.WKBFactory()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.add_area","title":"<code>add_area(idx, activity_tags, geom)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def add_area(self, idx, activity_tags, geom):\n    if geom:\n        geom = transform(self.transformer.transform, geom)\n        self.areas.auto_insert(OSMObject(idx=idx, activity_tags=activity_tags, geom=geom))\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.add_features","title":"<code>add_features()</code>","text":"<p>[\"units\", \"floors\", \"area\", \"floor_area\"]</p> Source code in <code>src/osmox/build.py</code> <pre><code>def add_features(self):\n    \"\"\"\n    [\"units\", \"floors\", \"area\", \"floor_area\"]\n    \"\"\"\n    for obj in helpers.progressBar(\n        self.objects, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n        obj.add_features(self.object_features)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.add_object","title":"<code>add_object(idx, activity_tags, osm_tags, geom)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def add_object(self, idx, activity_tags, osm_tags, geom):\n    if geom:\n        geom = transform(self.transformer.transform, geom)\n        self.objects.auto_insert(\n            Object(idx=idx, osm_tags=osm_tags, activity_tags=activity_tags, geom=geom)\n        )\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.add_point","title":"<code>add_point(idx, activity_tags, geom)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def add_point(self, idx, activity_tags, geom):\n    if geom:\n        geom = transform(self.transformer.transform, geom)\n        self.points.auto_insert(OSMObject(idx=idx, activity_tags=activity_tags, geom=geom))\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.area","title":"<code>area(a)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def area(self, a):\n    activity_tags = self.get_filtered_tags(a.tags)\n    if self.selects(a.tags):\n        self.add_object(\n            idx=a.id, osm_tags=a.tags, activity_tags=activity_tags, geom=self.fab_area(a)\n        )\n    elif activity_tags:\n        self.add_area(idx=a.id, activity_tags=activity_tags, geom=self.fab_area(a))\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.assign_activities","title":"<code>assign_activities()</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def assign_activities(self):\n    for obj in helpers.progressBar(\n        self.objects, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n        obj.assign_activities(self.activity_config)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.assign_nearest_distance","title":"<code>assign_nearest_distance(target_act)</code>","text":"<p>For each facility, calculate euclidean distance to targets of given activity type.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def assign_nearest_distance(self, target_act):\n    \"\"\"\n    For each facility, calculate euclidean distance to targets of given activity type.\n    \"\"\"\n    targets = self.extract_targets(target_act)\n    for obj in helpers.progressBar(\n        self.objects, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n        obj.get_closest_distance(targets, target_act)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.assign_tags","title":"<code>assign_tags()</code>","text":"<p>Assign unknown tags to buildings spatially.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def assign_tags(self):\n    \"\"\"\n    Assign unknown tags to buildings spatially.\n    \"\"\"\n    if not self.lazy:\n        self.assign_tags_full()\n    else:\n        self.assign_tags_lazy()\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.assign_tags_full","title":"<code>assign_tags_full()</code>","text":"<p>Assign unknown tags to buildings spatially.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def assign_tags_full(self):\n    \"\"\"\n    Assign unknown tags to buildings spatially.\n    \"\"\"\n\n    for obj in helpers.progressBar(\n        self.objects, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n\n        if obj.activity_tags:\n            # if an onject already has activity tags, continue\n            self.log[\"existing\"] += 1\n\n        if obj.assign_points(self.points):\n            # else try to assign activity tags based on contained point objects\n            self.log[\"points\"] += 1\n            continue\n\n        if obj.assign_areas(self.areas):\n            # else try to assign activity tags based on containing area objects\n            self.log[\"areas\"] += 1\n            continue\n\n        if self.default_tags and not obj.activity_tags:\n            # otherwise apply defaults if set\n            self.log[\"defaults\"] += 1\n            for a in self.default_tags:\n                obj.apply_default_tag(a)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.assign_tags_lazy","title":"<code>assign_tags_lazy()</code>","text":"<p>Assign tags if filtered object does not already have useful tags.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def assign_tags_lazy(self):\n    \"\"\"Assign tags if filtered object does not already have useful tags.\"\"\"\n\n    for obj in helpers.progressBar(\n        self.objects, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n\n        if obj.activity_tags:\n            # if an onject already has activity tags, continue\n            self.log[\"existing\"] += 1\n            continue\n\n        if obj.assign_points(self.points):\n            # else try to assign activity tags based on contained point objects\n            self.log[\"points\"] += 1\n            continue\n\n        if obj.assign_areas(self.areas):\n            # else try to assign activity tags based on containing area objects\n            self.log[\"areas\"] += 1\n            continue\n\n        if self.default_tags:\n            # otherwise apply defaults if set\n            self.log[\"defaults\"] += 1\n            for a in self.default_tags:\n                obj.apply_default_tag(a)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.extract_targets","title":"<code>extract_targets(target_act)</code>","text":"<p>Find targets</p> Source code in <code>src/osmox/build.py</code> <pre><code>def extract_targets(self, target_act):\n    \"\"\"\n    Find targets\n    \"\"\"\n    targets = []\n    for obj in self.objects:\n        if target_act in obj.activities:\n            targets.append(obj.geom.centroid)\n    return MultiPoint(targets)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.fab_area","title":"<code>fab_area(a)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def fab_area(self, a):\n    try:\n        wkb = self.wkbfab.create_multipolygon(a)\n        return wkblib.loads(wkb, hex=True)\n    except RuntimeError:\n        self.logger.warning(f\" RuntimeError encountered for polygon: {a}\")\n        return None\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.fab_point","title":"<code>fab_point(n)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def fab_point(self, n):\n    try:\n        wkb = self.wkbfab.create_point(n)\n        return wkblib.loads(wkb, hex=True)\n    except RuntimeError:\n        self.logger.warning(f\" RuntimeError encountered for point: {n}\")\n        return None\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.fill_missing_activities","title":"<code>fill_missing_activities(area_tags=('landuse', 'residential'), required_acts='home', new_tags=('building', 'house'), size=(10, 10), max_existing_acts_fraction=0.0, fill_method='spacing', point_source=None, spacing=(25, 25))</code>","text":"<p>Fill \"empty\" areas with new objects.</p> <p>Empty areas are defined as areas with the select_tags but containing no / a maximum number of objects of the required_acts.</p> <p>An example of such missing objects would be missing home facilities in a residential area. Empty areas are filled with new objects of given size based on the user-defined fill method.</p> PARAMETER DESCRIPTION <code>area_tags</code> <p>Tuple to define (any) osm tags of areas to be considered. Defaults to (\"landuse\", \"residential\").</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>('landuse', 'residential')</code> </p> <code>required_acts</code> <p>String value representing expected (any) object activity types to be found in areas. Defaults to \"home\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'home'</code> </p> <code>new_tags</code> <p>Tags for new objects. Defaults to (\"building\", \"house\").</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>('building', 'house')</code> </p> <code>size</code> <p>x,y dimensions of new object polygon (i.e. building footprint), extending from the bottom-left. Defaults to (10, 10).</p> <p> TYPE: <code>tuple[int, int]</code> DEFAULT: <code>(10, 10)</code> </p> <code>max_existing_acts_fraction</code> <p>Infill target areas only if there is at most this much area already taken up by <code>required_acts</code>. Defaults to 0.0, i.e., if there are any required activities already in a target area, do not infill.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.0</code> </p> <code>fill_method</code> <p>Method to use to distribute buildings within the tagged areas. Defaults to \"spacing\".</p> <p> TYPE: <code>Literal[spacing, point_source]</code> DEFAULT: <code>'spacing'</code> </p> <code>point_source</code> <p>Path to geospatial data file (that can be loaded by GeoPandas) containing point source data to fill tagged areas, if using <code>point_source</code> fill method. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>spacing</code> <p>x,y dimensions of new object bottom-left point spacing, if using <code>spacing</code> fill method. Defaults to (25, 25).</p> <p> TYPE: <code>Optional[tuple[int, int]]</code> DEFAULT: <code>(25, 25)</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If using point source infill method, a point source data file must be defined.</p> RETURNS DESCRIPTION <code>tuple[int, int]</code> <p>tuple[int, int]: A tuple of two ints representing number of empty zones, number of new objects</p> Source code in <code>src/osmox/build.py</code> <pre><code>def fill_missing_activities(\n    self,\n    area_tags: tuple = (\"landuse\", \"residential\"),\n    required_acts: Union[str, list[str]] = \"home\",\n    new_tags: tuple = (\"building\", \"house\"),\n    size: tuple[int, int] = (10, 10),\n    max_existing_acts_fraction: float = 0.0,\n    fill_method: Literal[\"spacing\", \"point_source\"] = \"spacing\",\n    point_source: Optional[str] = None,\n    spacing: Optional[tuple[int, int]] = (25, 25),\n) -&gt; tuple[int, int]:\n    \"\"\"Fill \"empty\" areas with new objects.\n\n    Empty areas are defined as areas with the select_tags but containing no / a maximum number of objects of the required_acts.\n\n    An example of such missing objects would be missing home facilities in a residential area.\n    Empty areas are filled with new objects of given size based on the user-defined fill method.\n\n    Args:\n        area_tags (tuple, optional):\n            Tuple to define (any) osm tags of areas to be considered.\n            Defaults to (\"landuse\", \"residential\").\n        required_acts (str, optional):\n            String value representing expected (any) object activity types to be found in areas.\n            Defaults to \"home\".\n        new_tags (tuple, optional): Tags for new objects. Defaults to (\"building\", \"house\").\n        size (tuple[int, int], optional):\n            x,y dimensions of new object polygon (i.e. building footprint), extending from the bottom-left.\n            Defaults to (10, 10).\n        max_existing_acts_fraction (float, optional):\n            Infill target areas only if there is at most this much area already taken up by `required_acts`.\n            Defaults to 0.0, i.e., if there are _any_ required activities already in a target area, do not infill.\n        fill_method (Literal[spacing, point_source], optional):\n            Method to use to distribute buildings within the tagged areas.\n            Defaults to \"spacing\".\n        point_source (Optional[str], optional):\n            Path to geospatial data file (that can be loaded by GeoPandas) containing point source data to fill tagged areas, if using `point_source` fill method.\n            Defaults to None.\n        spacing (Optional[tuple[int, int]], optional):\n            x,y dimensions of new object bottom-left point spacing, if using `spacing` fill method.\n            Defaults to (25, 25).\n\n    Raises:\n        ValueError: If using point source infill method, a point source data file must be defined.\n\n    Returns:\n        tuple[int, int]: A tuple of two ints representing number of empty zones, number of new objects\n    \"\"\"\n\n    empty_zones = 0  # counter for fill zones\n    i = 0  # counter for object id\n    new_osm_tags = [OSMTag(key=k, value=v) for k, v in area_tags]\n    new_tags = [OSMTag(key=k, value=v) for k, v in new_tags]\n    if not isinstance(required_acts, list):\n        required_acts = [required_acts]\n\n    if fill_method == \"point_source\":\n        if point_source is None:\n            raise ValueError(\n                \"Missing activity fill method expects a path to a point source geospatial data file, received None\"\n            )\n        gdf_point_source = helpers.read_geofile(point_source).to_crs(self.crs)\n\n    for target_area in helpers.progressBar(\n        self.areas, prefix=\"Progress:\", suffix=\"Complete\", length=50\n    ):\n        geom = target_area.geom\n        if not helpers.tag_match(a=area_tags, b=target_area.activity_tags):\n            continue\n\n        area_of_acts_in_target = self._required_activities_in_target(required_acts, geom, size)\n        if area_of_acts_in_target / geom.area &gt; max_existing_acts_fraction:\n            continue\n\n        empty_zones += 1  # increment another empty zone\n\n        # sample a grid\n        if fill_method == \"spacing\":\n            points = helpers.area_grid(area=geom, spacing=spacing)\n        elif fill_method == \"point_source\":\n            available_points = gdf_point_source[gdf_point_source.intersects(geom)].geometry\n            points = [i for i in zip(available_points.x, available_points.y)]\n        for point in points:  # add objects built from grid\n            self.objects.auto_insert(\n                helpers.fill_object(i, point, size, new_osm_tags, new_tags, required_acts)\n            )\n            i += 1\n\n    return empty_zones, i\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.geodataframe","title":"<code>geodataframe(single_use=False)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def geodataframe(self, single_use=False):\n\n    if single_use:\n        df = pd.DataFrame(\n            (summary for o in self.objects for summary in o.single_activity_summaries())\n        )\n        return gp.GeoDataFrame(df, geometry=\"geometry\", crs=self.crs)\n\n    df = pd.DataFrame((o.summary() for o in self.objects))\n    return gp.GeoDataFrame(df, geometry=\"geometry\", crs=self.crs)\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.get_filtered_tags","title":"<code>get_filtered_tags(tags)</code>","text":"<p>Return configured activity tags for an OSM object as list of OSMtags.</p> Source code in <code>src/osmox/build.py</code> <pre><code>def get_filtered_tags(self, tags):\n    \"\"\"\n    Return configured activity tags for an OSM object as list of OSMtags.\n    \"\"\"\n    if tags:\n        tags = dict(tags)\n        found = []\n        for osm_key, osm_val in tags.items():\n            if osm_key in self.activity_config:\n                if (\n                    osm_val in self.activity_config[osm_key]\n                    or self.activity_config[osm_key] == \"*\"\n                ):\n                    found.append(OSMTag(key=osm_key, value=osm_val))\n        return found\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.node","title":"<code>node(n)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def node(self, n):\n    activity_tags = self.get_filtered_tags(n.tags)\n    # todo consider renaming activiity tags to filtered or selected tags\n    if self.selects(n.tags):\n        self.add_object(\n            idx=n.id, osm_tags=n.tags, activity_tags=activity_tags, geom=self.fab_point(n)\n        )\n    elif activity_tags:\n        self.add_point(idx=n.id, activity_tags=activity_tags, geom=self.fab_point(n))\n</code></pre>"},{"location":"reference/osmox/build/#osmox.build.ObjectHandler.selects","title":"<code>selects(tags)</code>","text":"Source code in <code>src/osmox/build.py</code> <pre><code>def selects(self, tags):\n    if tags:\n        tags = dict(tags)\n        return helpers.dict_list_match(tags, self.filter)\n</code></pre>"},{"location":"reference/osmox/config/","title":"osmox.config","text":""},{"location":"reference/osmox/config/#osmox.config.SCHEMA","title":"<code>SCHEMA = json.load(f.open())</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/config/#osmox.config.SCHEMA_FILE","title":"<code>SCHEMA_FILE = importlib.resources.files('osmox') / 'schema.json'</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/config/#osmox.config.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/config/#osmox.config.get_acts","title":"<code>get_acts(config)</code>","text":"Source code in <code>src/osmox/config.py</code> <pre><code>def get_acts(config):\n    activity_config = config.get(\"activity_mapping\")\n    if activity_config:\n        acts = set()\n        for _tag_key, t_dict in activity_config.items():\n            for _t_value, act_list in t_dict.items():\n                for act in act_list:\n                    acts.add(act)\n\n        return acts\n    return set([])\n</code></pre>"},{"location":"reference/osmox/config/#osmox.config.get_tags","title":"<code>get_tags(config)</code>","text":"Source code in <code>src/osmox/config.py</code> <pre><code>def get_tags(config):\n    filter_config = config.get(\"filter\")\n    if filter_config:\n        keys = set()\n        tags = set()\n        for tag_key, tag_values in filter_config.items():\n            keys.add(tag_key)\n            for tag_value in tag_values:\n                tags.add((tag_key, tag_value))\n\n        return keys, tags\n    return set([]), set([])\n</code></pre>"},{"location":"reference/osmox/config/#osmox.config.load","title":"<code>load(config_path)</code>","text":"Source code in <code>src/osmox/config.py</code> <pre><code>def load(config_path):\n    logger.warning(f\"Loading config from '{config_path}'.\")\n    with open(config_path, \"r\") as read_file:\n        return json.load(read_file)\n</code></pre>"},{"location":"reference/osmox/config/#osmox.config.validate","title":"<code>validate(config)</code>","text":"Source code in <code>src/osmox/config.py</code> <pre><code>def validate(config):\n    validator = jsonschema.validators.validator_for(SCHEMA)\n    validator.META_SCHEMA[\"unevaluatedProperties\"] = False\n    validator.check_schema(SCHEMA)\n    jsonschema.validate(config, SCHEMA)\n</code></pre>"},{"location":"reference/osmox/config/#osmox.config.validate_activity_config","title":"<code>validate_activity_config(config)</code>","text":"Source code in <code>src/osmox/config.py</code> <pre><code>def validate_activity_config(config):\n    validate(config)\n    keys, tags = get_tags(config)\n    logger.info(f\"Configured OSM tag keys: {sorted(keys)}\")\n\n    acts = get_acts(config)\n    logger.info(f\"Configured activities: {sorted(acts)}\")\n\n    if \"distance_to_nearest\" in config:\n        act_diff = set(config[\"distance_to_nearest\"]).difference(acts)\n        if act_diff:\n            raise ValueError(f\"'Distance to nearest' has non-configured activities: {act_diff}\")\n\n    if \"fill_missing_activities\" in config:\n        for group in config[\"fill_missing_activities\"]:\n            act_diff = set(group.get(\"required_acts\", [])).difference(acts)\n            if act_diff:\n                raise ValueError(\n                    f\"'Fill missing activities' group has non-configured activities: {act_diff}\"\n                )\n</code></pre>"},{"location":"reference/osmox/helpers/","title":"osmox.helpers","text":""},{"location":"reference/osmox/helpers/#osmox.helpers.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/osmox/helpers/#osmox.helpers.AutoTree","title":"<code>AutoTree()</code>","text":"<p>               Bases: <code>Index</code></p> <p>Spatial bounding box transforming (using pyproj) and indexing (using Rtree).</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def __init__(self):\n    super().__init__()\n    self.objects = []\n    self.counter = 0\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.AutoTree.counter","title":"<code>counter = 0</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/helpers/#osmox.helpers.AutoTree.objects","title":"<code>objects = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/osmox/helpers/#osmox.helpers.AutoTree.auto_insert","title":"<code>auto_insert(object)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def auto_insert(self, object):\n    super().insert(self.counter, object.geom.bounds)\n    self.objects.append(object)\n    self.counter += 1\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.AutoTree.intersection","title":"<code>intersection(coordinates)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def intersection(self, coordinates):\n    ids = super().intersection(coordinates, objects=False)\n    return [self.objects[i] for i in ids]\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.PathPath","title":"<code>PathPath</code>","text":"<p>               Bases: <code>Path</code></p> <p>A Click path argument that returns a pathlib Path, not a string</p>"},{"location":"reference/osmox/helpers/#osmox.helpers.PathPath.convert","title":"<code>convert(value, param, ctx)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def convert(self, value, param, ctx):\n    return Path(super().convert(value, param, ctx))\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.area_grid","title":"<code>area_grid(area, spacing)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def area_grid(area, spacing):\n    grid = bounding_grid(area, spacing)\n    return [p for p in grid if area.intersects(Point(p))]\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.bounding_grid","title":"<code>bounding_grid(area, spacing)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def bounding_grid(area, spacing):\n    grid = []\n    min_x, min_y, max_x, max_y = area.bounds\n    nxs = 1 + int((max_x - min_x) / spacing[0])\n    nys = 1 + int((max_y - min_y) / spacing[1])\n    for ix in range(0, nxs):\n        x = min_x + (ix * spacing[0])\n        for iy in range(0, nys):\n            y = min_y + (iy * spacing[1])\n            grid.append((x, y))\n    return grid\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.dict_list_match","title":"<code>dict_list_match(d, dict_list)</code>","text":"<p>Check if simple key value pairs from dict d are in dictionary of lists. eg: dict_list_match({1:2}, {1:[1,2,3]}) == True dict_list_match({1:4}, {1:[1,2,3]}) == False dict_list_match({2:1}, {1:[1,2,3]}) == False</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def dict_list_match(d, dict_list):\n    \"\"\"\n    Check if simple key value pairs from dict d are in dictionary of lists.\n    eg:\n    dict_list_match({1:2}, {1:[1,2,3]}) == True\n    dict_list_match({1:4}, {1:[1,2,3]}) == False\n    dict_list_match({2:1}, {1:[1,2,3]}) == False\n    \"\"\"\n    for k, v in d.items():\n        viable = dict_list.get(k, [])\n        if v in viable or viable == \"*\":\n            return True\n    return False\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.fill_object","title":"<code>fill_object(i, point, size, new_osm_tags, new_tags, required_acts)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def fill_object(i, point, size, new_osm_tags, new_tags, required_acts):\n    geom = point_to_poly(point, size)\n    idx = f\"fill_{i}\"\n    object = build.Object(idx=idx, osm_tags=new_osm_tags, activity_tags=new_tags, geom=geom)\n    object.activities = list(required_acts)\n    return object\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.get_distance","title":"<code>get_distance(p)</code>","text":"<p>Return the distance between two shapely points Assumes orthogonal projection in meters :params tuple p: A tuple conctaining two Shapely points</p> <p>:return float: Distance in meters</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def get_distance(p):\n    \"\"\"\n    Return the distance between two shapely points\n    Assumes orthogonal projection in meters\n    :params tuple p: A tuple conctaining two Shapely points\n\n    :return float: Distance in meters\n    \"\"\"\n    distance = ((p[0].x - p[1].x) ** 2 + (p[0].y - p[1].y) ** 2) ** 0.5\n    return distance\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.height_to_m","title":"<code>height_to_m(height)</code>","text":"<p>Parse height to float in metres.</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def height_to_m(height):\n    \"\"\"\n    Parse height to float in metres.\n    \"\"\"\n    height.strip()\n\n    if is_string_float(height):\n        return float(height)\n\n    if \"m\" in height:\n        height = height.replace(\"m\", \"\")\n        if is_string_float(height):\n            return float(height)\n\n    if \"ft\" in height:\n        height = height.replace(\"ft\", \"\")\n        if is_string_float(height):\n            return float(height) * 3\n\n    if \"'\" in height:\n        return imperial_to_metric(height)\n\n    logger.warning(f\"Unable to convert height {height} to metres, returning 3\")\n    return 3.0\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.imperial_to_metric","title":"<code>imperial_to_metric(height)</code>","text":"<p>Convert imperial (feet and inches) to metric (metres). Expect formatted as 3'4\" (3 feet and 4 inches) or 3' (3 feet). Return float</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def imperial_to_metric(height):\n    \"\"\"\n    Convert imperial (feet and inches) to metric (metres).\n    Expect formatted as 3'4\" (3 feet and 4 inches) or 3' (3 feet).\n    Return float\n    \"\"\"\n    inches = float(height.split(\"'\")[0].strip()) * 12\n    if '\"' in height:\n        inches += float(height.split(\"'\")[-1].replace('\"', \"\").strip())\n    return round(inches / 39.3701, 3)\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.is_string_float","title":"<code>is_string_float(number)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def is_string_float(number):\n    try:\n        float(number)\n        return True\n    except ValueError:\n        return False\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.path_leaf","title":"<code>path_leaf(filepath)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def path_leaf(filepath):\n    folder_path = Path(filepath).parent\n    return folder_path\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.point_to_poly","title":"<code>point_to_poly(point, size)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def point_to_poly(point: tuple[float, float], size: tuple[float, float]) -&gt; Polygon:\n    dx, dy = size[0], size[1]\n    x, y = point\n    geom = Polygon([(x, y), (x + dx, y), (x + dx, y + dy), (x, y + dy), (x, y)])\n    return geom\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.progressBar","title":"<code>progressBar(iterable, prefix='', suffix='', decimals=1, length=100, fill='|', printEnd='\\r')</code>","text":"<pre><code>from here: https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console\nCall in a loop to create terminal progress bar\n@params:\n    iteration   - Required  : current iteration (Int)\n    total       - Required  : total iterations (Int)\n    prefix      - Optional  : prefix string (Str)\n    suffix      - Optional  : suffix string (Str)\n    decimals    - Optional  : positive number of decimals in percent complete (Int)\n    length      - Optional  : character length of bar (Int)\n    fill        - Optional  : bar fill character (Str)\n    printEnd    - Optional  : end character (e.g. \"\n</code></pre> <p>\", \" \") (Str)</p> Source code in <code>src/osmox/helpers.py</code> <pre><code>def progressBar(iterable, prefix=\"\", suffix=\"\", decimals=1, length=100, fill=\"|\", printEnd=\"\\r\"):\n    \"\"\"\n    from here: https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        length      - Optional  : character length of bar (Int)\n        fill        - Optional  : bar fill character (Str)\n        printEnd    - Optional  : end character (e.g. \"\\r\", \"\\r\\n\") (Str)\n    \"\"\"\n    total = len(iterable)\n\n    # Progress Bar Printing Function\n    def printProgressBar(iteration):\n        percent = (\"{0:.\" + str(decimals) + \"f}\").format(100 * (iteration / float(total)))\n        filledLength = int(length * iteration // total)\n        bar = fill * filledLength + \"-\" * (length - filledLength)\n        print(f\"\\r{prefix} |{bar}| {percent}% {suffix}\", end=printEnd)\n\n    # Initial Call\n    printProgressBar(0)\n    # Update Progress Bar\n    for i, item in enumerate(iterable):\n        yield item\n        printProgressBar(i + 1)\n    # Print New Line on Complete\n    print()\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.read_geofile","title":"<code>read_geofile(filepath)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def read_geofile(filepath: Union[str, Path]) -&gt; gp.GeoDataFrame:\n    filepath_extension = Path(filepath).suffixes\n    if \".parquet\" in filepath_extension:\n        return gp.read_parquet(filepath)\n    else:\n        return gp.read_file(filepath)\n</code></pre>"},{"location":"reference/osmox/helpers/#osmox.helpers.tag_match","title":"<code>tag_match(a, b)</code>","text":"Source code in <code>src/osmox/helpers.py</code> <pre><code>def tag_match(a, b):\n    if not len(a):\n        return False\n    if not len(b):\n        return False\n    for ka, va in a:\n        for kb, vb in b:\n            if ka == kb and va == vb:\n                return True\n    return False\n</code></pre>"}]}